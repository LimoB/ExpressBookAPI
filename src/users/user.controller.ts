import { Request, Response, NextFunction } from "express";
import {
  createUserServices,
  deleteUserServices,
  getUserByIdServices,
  getUsersServices,
  updateUserServices,
} from "./user.service";

// üì¶ Get all users
export const getUsers = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const allUsers = await getUsersServices();
    if (!allUsers || allUsers.length === 0) {
      res.status(404).json({ message: "No users found" });
      return;
    }
    res.status(200).json(allUsers);
  } catch (error) {
    next(error);
  }
};

// üîç Get user by ID
export const getUserById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  const userId = req.params.id;
  if (!userId) {
    res.status(400).json({ error: "User ID is required" });
    return;
  }

  try {
    const user = await getUserByIdServices(userId);
    if (!user) {
      res.status(404).json({ message: "User not found" });
    } else {
      res.status(200).json(user);
    }
  } catch (error) {
    next(error);
  }
};

// ‚ûï Create new user
export const createUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  const { fullName, email, password } = req.body;

  if (!fullName || !email || !password) {
    res.status(400).json({ error: "All fields are required" });
    return;
  }

  try {
    const newUser = await createUserServices({
      fullName,
      email,
      password,
      userId: "" // Required for schema type, even if autogenerated
    });
    res.status(201).json({ message: newUser });
  } catch (error) {
    next(error);
  }
};

// ‚úèÔ∏è Update user
export const updateUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  const userId = req.params.id;

  if (!userId) {
    res.status(400).json({ error: "Invalid user ID" });
    return;
  }

  const { fullName, email, password } = req.body;

  if (!fullName || !email || !password) {
    res.status(400).json({ error: "All fields are required" });
    return;
  }

  try {
    const updatedUser = await updateUserServices(userId, {
      fullName,
      email,
      password,
      userId: "" // This can be ignored if the update function excludes it
    });
    res.status(200).json({ message: updatedUser });
  } catch (error) {
    next(error);
  }
};

// ‚ùå Delete user
export const deleteUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  const userId = req.params.id;

  if (!userId) {
    res.status(400).json({ error: "Invalid user ID" });
    return;
  }

  try {
    const deletedUser = await deleteUserServices(userId);
    res.status(200).json({ message: deletedUser });
  } catch (error) {
    next(error);
  }
};
